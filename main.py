import discord
from discord.ext import commands
import yt_dlp as youtube_dl
import asyncio
import os
import shutil
from dotenv import load_dotenv
import time

load_dotenv()

TOKEN = os.environ.get('DISCORD_BOT_TOKEN')

if not TOKEN:
    print("L·ªói: Ch∆∞a thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng DISCORD_BOT_TOKEN trong file .env trong file .env")
    exit()

bot = commands.Bot(command_prefix='miku!', intents=discord.Intents.all(), help_command=None)

CACHE_DIR = './cache'
if not os.path.exists(CACHE_DIR):
    os.makedirs(CACHE_DIR)

ytdl_format_options = {
    'format': 'bestaudio/best',
    'outtmpl': f'{CACHE_DIR}/%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'ytsearch5',
    'source_address': '0.0.0.0',
    'cachedir': False,
    'rm-cache-dir': False,
}

ffmpeg_options = {
    'options': '-vn'
}

ytdl = youtube_dl.YoutubeDL(ytdl_format_options)


class Song:
    def __init__(self, source, title, url, requester, cached_file):
        self.source = source
        self.title = title
        self.url = url
        self.requester = requester
        self.cached_file = cached_file

    @classmethod
    async def from_url(cls, url, requester, loop=None):
        loop = loop or bot.loop
        start_time = time.time()
        cached_file = None
        try:
            data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=True))
        except Exception as e:
            print(f"L·ªñI yt-dlp from_url: Kh√¥ng th·ªÉ t·∫£i th√¥ng tin t·ª´ URL {url} - {e}")
            return None

        if 'entries' in data:
            data = data['entries'][0]

        filename = data['url']
        title = data.get('title') or "Unknown Title"
        cached_file = ytdl.prepare_filename(data)

        song_obj = cls(discord.FFmpegPCMAudio(cached_file, **ffmpeg_options), title, url, requester, cached_file)
        end_time = time.time()
        print(f"from_url: Th·ªùi gian x·ª≠ l√Ω Song.from_url cho URL {url}: {end_time - start_time:.4f} gi√¢y, File cache: {cached_file}")
        return song_obj

    @classmethod
    async def from_query(cls, query, requester, source_type='youtube', loop=None):
        loop = loop or bot.loop
        print(f"B·∫Øt ƒë·∫ßu t√¨m ki·∫øm {source_type} v·ªõi query: {query}")
        start_time_query = time.time()
        songs = []
        if source_type == 'youtube':
            try:
                data = await loop.run_in_executor(None, lambda: ytdl.extract_info(f"ytsearch5:{query}", download=False))
                if data is None:
                    print(f"L·ªñI yt-dlp from_query (youtube): yt-dlp tr·∫£ v·ªÅ None cho query '{query}'")
                    return None, None
            except Exception as e:
                print(f"L·ªñI yt-dlp from_query (youtube): L·ªói t√¨m ki·∫øm YouTube v·ªõi query '{query}' - {e}")
                return None, None
            entries = data.get('entries', [])
            if not entries:
                print(f"L·ªñI yt-dlp from_query (youtube): Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ cho query '{query}'")
                return None, None

            for entry in entries:
                url = entry.get('webpage_url')
                title = entry.get('title') or "Unknown Title"
                songs.append({'title': title, 'url': url})
        else:
            print(f"L·ªñI from_query: source_type kh√¥ng h·ª£p l·ªá: '{source_type}'")
            return None, None

        end_time_query = time.time()
        print(f"from_query: Th·ªùi gian t√¨m ki·∫øm {source_type} cho query '{query}': {end_time_query - start_time_query:.4f} gi√¢y, T√¨m th·∫•y {len(songs)} k·∫øt qu·∫£")
        return songs, source_type


class MusicQueue:
    def __init__(self):
        self.queue = []

    def add(self, song):
        self.queue.append(song)

    def get_next_song(self):
        if self.queue:
            return self.queue[0]
        else:
            return None

    def pop_song(self):
        if self.queue:
            return self.queue.pop(0)
        return None

    def peek_queue(self, start_index=0, items_per_page=5):
        if not self.queue:
            return [], 0, 0
        total_items = len(self.queue)
        start_index = max(0, min(start_index, total_items - 1))
        end_index = min(start_index + items_per_page, total_items)
        page_queue = self.queue[start_index:end_index]
        return page_queue, start_index, total_items

    def remove_song(self, index):
        if 1 <= index <= len(self.queue):
            removed_song = self.queue.pop(index - 1)
            return removed_song
        return None

    def clear_queue(self):
        self.queue = []

    def is_empty(self):
        return not self.queue


class MusicBot(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.voice_clients = {}
        self.music_queues = {}

    def get_voice_client(self, guild):
        return self.voice_clients.get(guild.id)

    def get_music_queue(self, guild):
        if guild.id not in self.music_queues:
            self.music_queues[guild.id] = MusicQueue()
        return self.music_queues[guild.id]

    async def play_song(self, ctx, song):
        print("B·∫Øt ƒë·∫ßu play_song")
        guild_id = ctx.guild.id
        voice_client = self.get_voice_client(ctx.guild)
        music_queue = self.get_music_queue(ctx.guild)

        if voice_client is None:
            voice_channel = ctx.author.voice.channel
            if voice_channel is None:
                await ctx.send("B·∫°n c·∫ßn ph·∫£i ·ªü trong k√™nh tho·∫°i ƒë·ªÉ d√πng l·ªánh n√†y.")
                print("play_song: Ng∆∞·ªùi d√πng kh√¥ng ·ªü trong k√™nh tho·∫°i")
                return False
            try:
                voice_client = await voice_channel.connect(timeout=10.0, reconnect=True)
                self.voice_clients[guild_id] = voice_client
                print(f"play_song: ƒê√£ k·∫øt n·ªëi t·ªõi k√™nh tho·∫°i: {voice_channel.name}")
            except discord.errors.ClientException as e:
                print(f"L·ªñI voice_client connect (play_song): ClientException - {e}")
                await ctx.send("Bot ƒë√£ k·∫øt n·ªëi t·ªõi k√™nh tho·∫°i ·ªü server n√†y r·ªìi.")
                return False
            except asyncio.TimeoutError as e:
                print(f"L·ªñI voice_client connect (play_song): TimeoutError - {e}")
                await ctx.send("K·∫øt n·ªëi k√™nh tho·∫°i b·ªã qu√° th·ªùi gian ch·ªù. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c th·ª≠ l·∫°i sau.")
                return False
            except Exception as e:
                print(f"L·ªñI voice_client connect (play_song): L·ªói kh√¥ng x√°c ƒë·ªãnh - {e}")
                await ctx.send("C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi k√™nh tho·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.")
                return False

        if song.source is None:
            await ctx.send("Kh√¥ng th·ªÉ ph√°t b√†i h√°t n√†y.")
            print("play_song: song.source is None")
            return False

        try:
            voice_client.play(song.source, after=lambda e: self.after_song(ctx, song, e))
            await ctx.send(f"üé∂ ƒêang ph√°t: **{song.title}** (Y√™u c·∫ßu b·ªüi {song.requester.mention})")
            print(f"play_song: ƒêang ph√°t b√†i h√°t: {song.title}")
            return True
        except Exception as e:
            print(f"L·ªói khi ph√°t nh·∫°c trong play_song: {e}")
            await ctx.send("C√≥ l·ªói x·∫£y ra khi ph√°t b√†i h√°t. Vui l√≤ng th·ª≠ l·∫°i sau.")
            return False

    def after_song(self, ctx, song, error=None):
        print("B·∫Øt ƒë·∫ßu after_song")
        if error:
            print(f"L·ªói khi ph√°t nh·∫°c: {error}")

        music_queue = self.get_music_queue(ctx.guild)

        if song and song.cached_file and os.path.exists(song.cached_file):
            print(f"after_song: X√≥a file cache: {song.cached_file}")
            try:
                os.remove(song.cached_file)
            except Exception as e:
                print(f"L·ªñI after_song: Kh√¥ng th·ªÉ x√≥a file cache {song.cached_file}: {e}")

        music_queue.pop_song()

        next_song = music_queue.get_next_song()
        if next_song:
            print("after_song: Ph√°t b√†i ti·∫øp theo - T√™n b√†i:", next_song.title)
            coroutine = self.play_song(ctx, next_song)
            bot.loop.create_task(coroutine)
            print("after_song: ƒê√£ scheduled play_song task")
        else:
            print("after_song: H·∫øt h√†ng ƒë·ª£i, d·ª´ng nh·∫°c")
            bot.loop.create_task(self.leave_after_delay(ctx))

    async def leave_after_delay(self, ctx):
        voice_client = self.get_voice_client(ctx.guild)
        if voice_client and not self.get_music_queue(ctx.guild).queue:
            await self.send_queue_finished_embed(ctx)
            await asyncio.sleep(905)
            await self.disconnect_voice_client(ctx.guild)
            await self.send_leave_embed(ctx)

    async def send_queue_finished_embed(self, ctx):
        embed = discord.Embed(title="üò¥ ƒê√£ ph√°t h·∫øt h√†ng ƒë·ª£i", color=discord.Color.gold())
        await ctx.send(embed=embed)

    async def send_leave_embed(self, ctx):
        embed = discord.Embed(title="üëã ƒê√£ r·ªùi k√™nh tho·∫°i do kh√¥ng ho·∫°t ƒë·ªông", color=discord.Color.red())
        await ctx.send(embed=embed)

    async def disconnect_voice_client(self, guild):
        voice_client = self.get_voice_client(guild)
        if voice_client:
            try:
                await voice_client.disconnect()
            except Exception as e:
                print(f"L·ªói ng·∫Øt k·∫øt n·ªëi: {e}")

            if guild.id in self.voice_clients:
                del self.voice_clients[guild.id]

            print("stop_music: X√≥a th∆∞ m·ª•c cache:", CACHE_DIR)
            try:
                shutil.rmtree(CACHE_DIR)
                os.makedirs(CACHE_DIR)
                print("stop_music: ƒê√£ x√≥a th∆∞ m·ª•c cache th√†nh c√¥ng")
            except Exception as e:
                print(f"L·ªñI stop_music: L·ªói khi x√≥a th∆∞ m·ª•c cache {CACHE_DIR}: {e}")

    async def display_search_results(self, ctx, search_results, source_type, page=1, songs_per_page=5, embed_message=None, selection_message=None):
        print("display_search_results function called")
        if not search_results:
            print("No search results in display_search_results")
            await ctx.send("Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o.")
            return

        start_index = (page - 1) * songs_per_page
        end_index = min(start_index + songs_per_page, len(search_results))
        current_page_songs = search_results[start_index:end_index]

        embed = discord.Embed(title=f"K·∫øt qu·∫£ t√¨m ki·∫øm t·ª´ {source_type.capitalize()} (Trang {page})", color=discord.Color.blue())
        description = ""
        for i, song_info in enumerate(current_page_songs):
            description += f"{start_index + i + 1}. [{song_info['title']}]({song_info['url']})\n"
        embed.description = description
        embed.set_footer(text=f"Trang {page}/{((len(search_results) - 1) // songs_per_page) + 1}")

        if embed_message:
            print("Editing existing embed message")
            await embed_message.edit(embed=embed)
        else:
            print("Sending new embed message")
            embed_message = await ctx.send(embed=embed)

        if selection_message:
            await selection_message.delete()

        if len(search_results) > songs_per_page:
            if page > 1:
                await embed_message.add_reaction("‚¨ÖÔ∏è")
            if end_index < len(search_results):
                await embed_message.add_reaction("‚û°Ô∏è")

        selection_message = await ctx.send("Ch·ªçn s·ªë b√†i h√°t b·∫°n mu·ªën th√™m v√†o h√†ng ƒë·ª£i (ho·∫∑c cancel ƒë·ªÉ h·ªßy):")

        def check_reaction(reaction, user):
            return user == ctx.author and reaction.message.id == embed_message.id and str(reaction.emoji) in ["‚¨ÖÔ∏è", "‚û°Ô∏è"]

        def check_selection(message):
            if message.author == ctx.author and message.channel == ctx.channel:
                if message.content.lower() == 'cancel':
                    return True
                try:
                    selection = int(message.content)
                    return 1 <= selection <= len(search_results)
                except ValueError:
                    return False
            return False

        try:
            reaction_task = asyncio.create_task(bot.wait_for('reaction_add', check=check_reaction, timeout=60.0))
            message_task = asyncio.create_task(bot.wait_for('message', check=check_selection, timeout=60.0))
      
            done, pending = await asyncio.wait(
                [reaction_task, message_task],
                return_when=asyncio.FIRST_COMPLETED
            )

            for task in pending:
                task.cancel()

            if done:
                future = done.pop()
                try:
                    result = future.result()
                    if isinstance(result, tuple):
                        reaction, user = result
                        if str(reaction.emoji) == "‚¨ÖÔ∏è":
                            new_page = max(1, page - 1)
                            await embed_message.clear_reactions()
                            await selection_message.delete()
                            await self.display_search_results(ctx, search_results, source_type, new_page, songs_per_page, embed_message)
                        elif str(reaction.emoji) == "‚û°Ô∏è":
                            new_page = min(page + 1, ((len(search_results) - 1) // songs_per_page) + 1)
                            await embed_message.clear_reactions()
                            await selection_message.delete()
                            await self.display_search_results(ctx, search_results, source_type, new_page, songs_per_page, embed_message)
                    else:
                        message = result
                        if message.content.lower() == 'cancel':
                            await ctx.send("ƒê√£ h·ªßy t√¨m ki·∫øm.")
                        else:
                            try:
                                selection = int(message.content)
                                selected_song_info = search_results[selection - 1]
                                song_url = selected_song_info['url']
                                song_title = selected_song_info['title']
                                start_time_song_from_url = time.time()
                                song = await Song.from_url(song_url, ctx.author, loop=bot.loop)
                                end_time_song_from_url = time.time()
                                print(f"display_search_results: Th·ªùi gian Song.from_url: {end_time_song_from_url - start_time_song_from_url:.4f} gi√¢y")
                                if song:
                                    music_queue = self.get_music_queue(ctx.guild)
                                    start_time_queue_add = time.time()
                                    music_queue.add(song)
                                    end_time_queue_add = time.time()
                                    print(f"display_search_results: Th·ªùi gian queue.add: {end_time_queue_add - start_time_queue_add:.4f} gi√¢y")
                                    await ctx.send(f"‚úÖ ƒê√£ th√™m **{song.title}** v√†o h√†ng ƒë·ª£i.")

                                    voice_client = ctx.voice_client
                                    if voice_client is None:
                                        voice_channel = ctx.author.voice.channel
                                        if voice_channel:
                                            try:
                                                voice_client = await voice_channel.connect(timeout=10.0, reconnect=True)
                                                self.voice_clients[ctx.guild.id] = voice_client
                                                print(f"Bot t·ª± ƒë·ªông tham gia k√™nh tho·∫°i: {voice_channel.name}")
                                            except Exception as e:
                                                print(f"L·ªñI t·ª± ƒë·ªông join k√™nh tho·∫°i: {e}")
                                        else:
                                            print("Ng∆∞·ªùi d√πng kh√¥ng ·ªü trong k√™nh tho·∫°i, kh√¥ng t·ª± ƒë·ªông join.")

                                    if not ctx.voice_client or not ctx.voice_client.is_playing():
                                        next_song = music_queue.get_next_song()
                                        if next_song:
                                            await self.play_song(ctx, next_song)
                                else:
                                    await ctx.send("Kh√¥ng th·ªÉ t·∫£i b√†i h√°t n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.")

                            except ValueError:
                                await ctx.send("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë t·ª´ danh s√°ch.")
                            except Exception as e:
                                print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi ch·ªçn b√†i h√°t: {e}")
                                await ctx.send("C√≥ l·ªói x·∫£y ra khi ch·ªçn b√†i h√°t. Vui l√≤ng th·ª≠ l·∫°i sau.")

                        await message.delete()
                        await selection_message.delete()
                except asyncio.TimeoutError:
                    await ctx.send("H·∫øt th·ªùi gian ch·ªù ch·ªçn b√†i h√°t.")
                    await embed_message.clear_reactions()
                    await selection_message.delete()
                except Exception as e:
                    print(f"L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω k·∫øt qu·∫£: {e}")
                    await ctx.send("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.")
            else:
                await ctx.send("H·∫øt th·ªùi gian ch·ªù ch·ªçn b√†i h√°t.")
                await embed_message.clear_reactions()
                await selection_message.delete()

        except asyncio.TimeoutError:
            await ctx.send("H·∫øt th·ªùi gian ch·ªù ch·ªçn b√†i h√°t.")
            await embed_message.clear_reactions()
            await selection_message.delete()
        except Exception as e:
            print(f"L·ªói l·ªõn trong display_search_results: {e}")
            await ctx.send("ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën. Vui l√≤ng th·ª≠ l·∫°i sau.")
        print("display_search_results function finished")

    @commands.command(name='play', aliases=['p', 'phat'])
    async def play_command(self, ctx, *, query: str):
        if ctx.author.voice is None:
            return await ctx.send("B·∫°n c·∫ßn ph·∫£i ·ªü trong k√™nh tho·∫°i ƒë·ªÉ d√πng l·ªánh n√†y.")

        voice_client = self.get_voice_client(ctx.guild)
        if voice_client is None:
            voice_channel = ctx.author.voice.channel
            if voice_channel is None:
                return await ctx.send("B·∫°n kh√¥ng ·ªü trong k√™nh tho·∫°i n√†o.")

        async with ctx.typing():
            start_time_play_youtube = time.time()
            if query.startswith(('http://', 'https://', 'www.youtube.com', 'm.youtube.com', 'youtu.be', 'youtube.com', 'youtu.be')):
                try:
                    start_time_song_from_url_py = time.time()
                    song = await Song.from_url(query, ctx.author, loop=bot.loop)
                    end_time_song_from_url_py = time.time()
                    print(f"play_youtube: Th·ªùi gian Song.from_url (link): {end_time_song_from_url_py - start_time_song_from_url_py:.4f} gi√¢y")
                    if song:
                        music_queue = self.get_music_queue(ctx.guild)
                        start_time_queue_add_py = time.time()
                        music_queue.add(song)
                        end_time_queue_add_py = time.time()
                        print(f"play_youtube: Th·ªùi gian queue.add (link): {end_time_queue_add_py - start_time_queue_add_py:.4f} gi√¢y")
                        await ctx.send(f"‚úÖ ƒê√£ th√™m **{song.title}** v√†o h√†ng ƒë·ª£i.")
                        if not voice_client or not voice_client.is_playing():
                            next_song = music_queue.get_next_song()
                            if next_song:
                                await self.play_song(ctx, next_song)
                    else:
                        await ctx.send("Kh√¥ng th·ªÉ t·∫£i b√†i h√°t t·ª´ URL YouTube n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.")
                except Exception as e:
                    print(f"L·ªñI play_youtube: L·ªói khi t·∫£i b√†i h√°t t·ª´ URL YouTube: {e}")
                    await ctx.send("L·ªói khi t·∫£i b√†i h√°t t·ª´ URL YouTube. Vui l√≤ng th·ª≠ l·∫°i sau.")
            else:
                print(f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω l·ªánh play v·ªõi query: {query}")
                start_time_from_query_py = time.time()
                search_results, source_type = await Song.from_query(query, ctx.author, 'youtube', loop=bot.loop)
                end_time_from_query_py = time.time()
                print(f"play_youtube: Th·ªùi gian Song.from_query (query): {end_time_from_query_py - start_time_from_query_py:.4f} gi√¢y")
                if search_results:
                    if not search_results:
                        print(f"L·ªñI play_youtube: Song.from_query tr·∫£ v·ªÅ search_results r·ªóng cho query: {query}")
                        return await ctx.send("Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o tr√™n Youtube.")
                    await self.display_search_results(ctx, search_results, source_type)
                else:
                    print(f"L·ªñI play_youtube: Song.from_query tr·∫£ v·ªÅ None cho query: {query}")
                    await ctx.send("Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o tr√™n Youtube.")
            end_time_play_youtube = time.time()
            print(f"play_youtube: T·ªïng th·ªùi gian x·ª≠ l√Ω l·ªánh play: {end_time_play_youtube - start_time_play_youtube:.4f} gi√¢y")

    @commands.command(name='skip', aliases=['sk', 'boqua'])
    async def skip_command(self, ctx):
        voice_client = self.get_voice_client(ctx.guild)
        if voice_client is not None and voice_client.is_playing():
            print("skip_song: ƒêang d·ª´ng ph√°t nh·∫°c hi·ªán t·∫°i")
            voice_client.stop()
            await ctx.send("‚è≠Ô∏è ƒê√£ b·ªè qua b√†i h√°t hi·ªán t·∫°i.")
            print("skip_song: ƒê√£ g·ª≠i th√¥ng b√°o skip")
        else:
            print("skip_song: Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ƒë·ªÉ skip")
            await ctx.send("Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ƒë·ªÉ b·ªè qua.")

    @commands.command(name='stop', aliases=['st', 'dung'])
    async def stop_command(self, ctx):
        voice_client = self.get_voice_client(ctx.guild)
        if voice_client:
            music_queue = self.get_music_queue(ctx.guild)
            music_queue.clear_queue()
            voice_client.stop()
            await self.disconnect_voice_client(ctx.guild)
            await ctx.send("üëã ƒê√£ d·ª´ng ph√°t nh·∫°c v√† r·ªùi k√™nh tho·∫°i.")
        else:
            await ctx.send("Bot kh√¥ng ·ªü trong k√™nh tho·∫°i.")

    @commands.command(name='queue', aliases=['q', 'list'])
    async def queue_command(self, ctx, page: int = 1):
        await self.show_queue(ctx, page)

    async def show_queue(self, ctx, page=1):
        music_queue = self.get_music_queue(ctx.guild)
        if music_queue.is_empty():
            return await ctx.send("H√†ng ƒë·ª£i hi·ªán ƒëang tr·ªëng.")

        items_per_page = 10
        queue_list, start_index, total_items = music_queue.peek_queue((page - 1) * items_per_page, items_per_page)
        if not queue_list:
            return await ctx.send(f"Kh√¥ng c√≥ trang {page} trong h√†ng ƒë·ª£i.")

        embed = discord.Embed(title=f"üé∂ H√†ng ƒë·ª£i b√†i h√°t (Trang {page}/{((total_items - 1) // items_per_page) + 1})", color=discord.Color.blue())
        description = ""
        for i, song in enumerate(queue_list):
            description += f"{start_index + i + 1}. [{song.title}]({song.url}) - Y√™u c·∫ßu b·ªüi {song.requester.mention}\n"
        embed.description = description
        embed.set_footer(text=f"{total_items} b√†i h√°t trong h√†ng ƒë·ª£i.")
        await ctx.send(embed=embed)

    @commands.command(name='help', aliases=['h', 'trogiup'])
    async def miku_help_command(self, ctx):
        embed = discord.Embed(title="üéµ L·ªánh Bot Nh·∫°c Miku", color=discord.Color.blue())
        embed.add_field(name="miku!play <t√™n b√†i h√°t YouTube ho·∫∑c link YouTube>", value="Ph√°t nh·∫°c t·ª´ Youtube.", inline=False)
        embed.add_field(name="miku!skip", value="B·ªè qua b√†i h√°t hi·ªán t·∫°i.", inline=False)
        embed.add_field(name="miku!stop", value="D·ª´ng ph√°t nh·∫°c v√† r·ªùi k√™nh tho·∫°i.", inline=False)
        embed.add_field(name="miku!queue [trang]", value="Hi·ªÉn th·ªã h√†ng ƒë·ª£i b√†i h√°t (m·∫∑c ƒë·ªãnh trang 1).", inline=False)
        embed.add_field(name="miku!nowplaying ho·∫∑c miku!np", value="Hi·ªÉn th·ªã b√†i h√°t ƒëang ph√°t.", inline=False)
        embed.add_field(name="miku!help", value="Hi·ªÉn th·ªã tr·ª£ gi√∫p.", inline=False)
        embed.add_field(name="miku!join", value="Tham gia k√™nh tho·∫°i b·∫°n ƒëang ·ªü.", inline=False)
        embed.set_footer(text="HatsuneMiku Youtube Music Bot created by @imnhyneko.")
        await ctx.send(embed=embed)

    @commands.command(name='helpme')
    async def help_miku_command_alias(self, ctx):
        await ctx.invoke(self.miku_help_command)

    @commands.command(name='nowplaying', aliases=['np', 'now'])
    async def now_playing_command(self, ctx):
        await self.now_playing(ctx)

    async def now_playing(self, ctx):
        music_queue = self.get_music_queue(ctx.guild)
        if music_queue.is_empty():
            return await ctx.send("Hi·ªán t·∫°i kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t.")

        next_song = music_queue.get_next_song()
        if not next_song:
            return await ctx.send("Hi·ªán t·∫°i kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t.")

        embed = discord.Embed(title="üé∂ ƒêang ph√°t", color=discord.Color.green())
        embed.description = f"[{next_song.title}]({next_song.url}) - Y√™u c·∫ßu b·ªüi {next_song.requester.mention}"
        await ctx.send(embed=embed)

    @commands.command(name='join', aliases=['j', 'vao'])
    async def join_command(self, ctx):
        await self.join_voice_channel(ctx)

    async def join_voice_channel(self, ctx):
        voice_channel = ctx.author.voice.channel
        if voice_channel is None:
            return await ctx.send("B·∫°n kh√¥ng ·ªü trong k√™nh tho·∫°i n√†o.")

        voice_client = self.get_voice_client(ctx.guild)
        if voice_client is None:
            try:
                voice_client = await voice_channel.connect(timeout=10.0, reconnect=True)
                self.voice_clients[ctx.guild.id] = voice_client
                await ctx.send(f"‚úÖ ƒê√£ tham gia k√™nh **{voice_channel.name}**.")
            except discord.errors.ClientException as e:
                print(f"L·ªñI join_voice_channel: ClientException - {e}")
                await ctx.send("Bot ƒë√£ k·∫øt n·ªëi t·ªõi k√™nh tho·∫°i ·ªü server n√†y r·ªìi.")
            except asyncio.TimeoutError as e:
                print(f"L·ªñI join_voice_channel: TimeoutError - {e}")
                await ctx.send("K·∫øt n·ªëi k√™nh tho·∫°i b·ªã qu√° th·ªùi gian ch·ªù. Vui l√≤ng th·ª≠ l·∫°i sau.")
            except Exception as e:
                print(f"L·ªñI join_voice_channel: L·ªói kh√¥ng x√°c ƒë·ªãnh - {e}")
                await ctx.send("C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi k√™nh tho·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.")
        elif voice_client.channel != voice_channel:
            await voice_client.move_to(voice_channel)
            await ctx.send(f"‚úÖ ƒê√£ di chuy·ªÉn t·ªõi k√™nh **{voice_channel.name}**.")
        else:
            await ctx.send("Bot ƒë√£ ·ªü trong k√™nh tho·∫°i n√†y r·ªìi.")


@bot.event
async def on_ready():
    print(f'Bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi t√™n: {bot.user.name}')
    print("C√°c k√™nh bot c√≥ th·ªÉ truy c·∫≠p:")
    for guild in bot.guilds:
        print(f"- Server: {guild.name}")
        for channel in guild.channels:
            if isinstance(channel, discord.TextChannel) and channel.permissions_for(guild.me).read_messages and channel.permissions_for(guild.me).view_channel:
                print(f"  - K√™nh vƒÉn b·∫£n: {channel.name} (ID: {channel.id})")
            elif isinstance(channel, discord.VoiceChannel) and channel.permissions_for(guild.me).view_channel and channel.permissions_for(guild.me).connect:
                print(f"  - K√™nh tho·∫°i: {channel.name} (ID: {channel.id})")
            elif isinstance(channel, discord.CategoryChannel) and channel.permissions_for(guild.me).view_channel:
                print(f"  - Danh m·ª•c: {channel.name} (ID: {channel.id})")
            elif isinstance(channel, discord.StageChannel) and channel.permissions_for(guild.me).view_channel and channel.permissions_for(guild.me).connect:
                print(f"  - K√™nh s√¢n kh·∫•u: {channel.name} (ID: {channel.id})")
        print("---")

    await bot.change_presence(activity=discord.Activity(name="miku!help", type=discord.ActivityType.listening, details="C√πng l·∫Øng nghe"))


async def setup(bot):
    await bot.add_cog(MusicBot(bot))

async def main():
    await setup(bot)
    await bot.start(TOKEN)

if __name__ == '__main__':
    asyncio.run(main())
